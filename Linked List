/* IMPORTANT */

A] Singly Linked List 

// 1.Insertion(Head)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    //created a new node
    Node *node1 = new Node(10);
    //head pointed to node1
    Node *head=node1;
    print(head);
    insertAtHead(head,12);
    print(head);
    insertAtHead(head,15);
    print(head);
    return 0;
}

// 2.Insertion(Tail)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void print(Node *&tail){
    Node *temp=tail;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    // Tail pointed to new node
    Node *tail=node1;
    print(tail);
    insertAtTail(tail,20);
    print(tail);
    insertAtTail(tail,30);
    print(tail);
    insertAtTail(tail,40);
    print(tail);
    return 0;
}

// 3.Insertion(in middle)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    return 0;
}

// Deletion

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        // memory free;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"Memory free "<<value<<endl;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void deleteNode(Node *&head,int position){
    // deletion at first position
    if(position==1){
        Node *temp=head;
        head=head->next;
        // memory free;
        temp->next=NULL;
        delete temp;
    }
    // deletion at any position or last position
    else{
        Node *prev=NULL;
        Node *curr=head;
        int count=1;
        while(count<position){
            prev=curr;
            curr=curr->next;
            count++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
        // Placing tail at it's correct position
        if(prev->next==NULL){
            tail=prev;
        }
    }
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    deleteNode(head,4);
    print(head);
    return 0;
}

B] Doubly Linked List

