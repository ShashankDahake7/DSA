/* IMPORTANT */

A] Singly Linked List 

// 1.Insertion(Head)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    //created a new node
    Node *node1 = new Node(10);
    //head pointed to node1
    Node *head=node1;
    print(head);
    insertAtHead(head,12);
    print(head);
    insertAtHead(head,15);
    print(head);
    return 0;
}

// 2.Insertion(Tail)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void print(Node *&tail){
    Node *temp=tail;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    // Tail pointed to new node
    Node *tail=node1;
    print(tail);
    insertAtTail(tail,20);
    print(tail);
    insertAtTail(tail,30);
    print(tail);
    insertAtTail(tail,40);
    print(tail);
    return 0;
}

// 3.Insertion(in middle)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    return 0;
}

// Deletion

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        // memory free;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"Memory free "<<value<<endl;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void deleteNode(Node *&head,int position){
    // deletion at first position
    if(position==1){
        Node *temp=head;
        head=head->next;
        // memory free;
        temp->next=NULL;
        delete temp;
    }
    // deletion at any position or last position
    else{
        Node *prev=NULL;
        Node *curr=head;
        int count=1;
        while(count<position){
            prev=curr;
            curr=curr->next;
            count++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
        // Placing tail at it's correct position
        if(prev->next==NULL){
            tail=prev;
        }
    }
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    deleteNode(head,4);
    print(head);
    return 0;
}

B] Doubly Linked List

#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *prev;
    Node *next;
    Node(int data)
    {
        this->data = data;
        this->prev = NULL;
        this->next = NULL;
    }
    ~Node()
    {
        int value = this->data;
        if (next != NULL)
        {
            delete next;
            next = NULL;
        }
        cout << "Memory free " << value << endl;
    }
};
// Traversing a linked list
void print(Node *head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
// Length of the linked list
int getLength(Node *head)
{
    int length = 0;
    Node *temp = head;
    while (temp != NULL)
    {
        length++;
        temp = temp->next;
    }
    return length;
}
// Inserting at head
void insertAtHead(Node *&tail, Node *&head, int d)
{
    // empty list
    if (head == NULL)
    {
        Node *temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else
    {
        Node *temp = new Node(d);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}
// Inserting at tail
void insertAtTail(Node *&tail, Node *&head, int d)
{
    // empty list
    if (tail == NULL)
    {
        Node *temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else
    {
        Node *temp = new Node(d);
        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    }
}
// Inserting at some random position
void insertAtPosition(Node *&tail, Node *&head, int position, int d)
{
    // innserting at start
    if (position == 1)
    {
        insertAtHead(tail, head, d);
        return;
    }
    Node *temp = head;
    int count = 1;
    while (count < position - 1)
    {
        temp = temp->next;
        count++;
    }
    // inserting at last position
    if (temp->next == NULL)
    {
        insertAtTail(tail, head, d);
        return;
    }
    // creating node for d
    Node *nodeToInsert = new Node(d);
    nodeToInsert->next = temp->next;
    temp->next->prev = nodeToInsert;
    temp->next = nodeToInsert;
    nodeToInsert->prev = temp;
}
void deleteNode(int position, Node *&head, Node *&tail)
{
    // deleting first node
    if (position == 1)
    {
        Node *temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    // deleting any random position node or last node
    else
    {
        Node *curr = head;
        Node *prev = NULL;
        int count = 1;
        while (count < position)
        {
            prev = curr;
            curr = curr->next;
            count++;
        }
        curr->prev = NULL;
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
        // Placing tail at it's correct position
        if(prev->next==NULL){
            tail=prev;
        }
    }
}
int main()
{
    Node *node1 = new Node(10);
    Node *head = node1;
    Node *tail = node1;
    // Node *head=NULL;
    // Node *tail=NULL;
    print(head);
    cout << getLength(head) << endl;
    insertAtHead(tail, head, 11);
    print(head);
    insertAtHead(tail, head, 12);
    print(head);
    insertAtHead(tail, head, 13);
    print(head);
    insertAtTail(tail, head, 15);
    print(head);
    insertAtPosition(tail, head, 2, 7);
    print(head);
    insertAtPosition(tail, head, 1, 10);
    print(head);
    insertAtPosition(tail, head, 8, 3);
    print(head);
    deleteNode(1, head, tail);
    print(head);
    deleteNode(3, head, tail);
    print(head);
    deleteNode(6, head, tail);
    print(head);
    cout<<head->data<<" "<<tail->data;
    return 0;
}

C] Circular Linked List

#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next = NULL;

    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
    ~Node()
    {
        int value = this->data;
        if (this->next != NULL)
        {
            delete next;
            next = NULL;
        }
        cout << "Memory free " << value << endl;
    }
};
void insertNode(Node *&tail, int element, int d)
{

    // empty list
    if (tail == NULL)
    {
        Node *newNode = new Node(d);
        tail = newNode;
        newNode->next = newNode;
    }
    // non-empty list assuming that the element is present in the list
    else
    {
        Node *curr = tail;
        while (curr->data != element)
        {
            curr = curr->next;
        }
        // element found -> curr is representing element wala node
        Node *temp = new Node(d);
        temp->next = curr->next;
        curr->next = temp;
    }
}
// Deletion
void deleteNode(Node *&tail,int value){
    // empty list
    if(tail==NULL){
        cout<<"List is empty "<<endl;
    }
    // non-empty list assuming that the element is present in the list
    else{
        Node *prev=tail;
        Node *curr=prev->next;
        while((curr->data)!= value){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        // Only 1 node in the linked list
        if(curr==prev){
            tail=NULL;
        }
        // Greater than or equal to 2 node in the linked list
        if(tail==curr){
            tail=prev;
        }
        curr->next=NULL;
        delete curr;
    }
}
// Traversing 
void print(Node *&tail){
    if(tail==NULL){
        cout<<"List is empty "<<endl;
        return;
    }
    Node *temp=tail;
    do{
        cout<< tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}
int main()
{
    Node *tail = NULL;
    // insertion in empty list
    insertNode(tail,5,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    insertNode(tail,5,7);
    print(tail);
    insertNode(tail,7,9);
    print(tail);
    insertNode(tail,5,6);
    print(tail);
    insertNode(tail,9,10);
    print(tail);
    insertNode(tail,3,4);
    print(tail);
    deleteNode(tail,3);
    print(tail);
    deleteNode(tail,7);
    print(tail);
    deleteNode(tail,10);
    print(tail);
    return 0;
}

D] Circular Doubly Linked list

