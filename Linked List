/* IMPORTANT */

A] Singly Linked List 

// 1.Insertion(Head)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    //created a new node
    Node *node1 = new Node(10);
    //head pointed to node1
    Node *head=node1;
    print(head);
    insertAtHead(head,12);
    print(head);
    insertAtHead(head,15);
    print(head);
    return 0;
}

// 2.Insertion(Tail)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void print(Node *&tail){
    Node *temp=tail;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    // Tail pointed to new node
    Node *tail=node1;
    print(tail);
    insertAtTail(tail,20);
    print(tail);
    insertAtTail(tail,30);
    print(tail);
    insertAtTail(tail,40);
    print(tail);
    return 0;
}

// 3.Insertion(in middle)

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    return 0;
}

// Deletion

#include<iostream>
using namespace std;
class Node{
    public:
        int data;
        Node *next;
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    ~Node(){
        int value=this->data;
        // memory free;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"Memory free "<<value<<endl;
    }
};
void insertAtHead(Node *&head,int d){
    Node *temp=new Node(d);
    temp->next=head;
    head=temp;
}
void insertAtTail(Node *&tail,int d){
    Node *temp=new Node(d);
    tail->next=temp;
    tail=temp;
}
void insertAtPos(Node *&tail,Node *&head,int position,int d){
    // inserting at first position
    if(position==1){
        insertAtHead(head,d);
        return;
    }
    Node *temp=head;
    int count=1;
    while(count<position-1){
        temp=temp->next;
        count++;
    }
    // inserting at last position
    if(temp->next==NULL){
        insertAtTail(tail,d);
        return;
    }
    // Creating a node for d
    Node *NodeToInsert=new Node(d);
    NodeToInsert->next=temp->next;
    temp->next=NodeToInsert;
}
void deleteNode(Node *&head,int position){
    // deletion at first position
    if(position==1){
        Node *temp=head;
        head=head->next;
        // memory free;
        temp->next=NULL;
        delete temp;
    }
    // deletion at any position or last position
    else{
        Node *prev=NULL;
        Node *curr=head;
        int count=1;
        while(count<position){
            prev=curr;
            curr=curr->next;
            count++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
        // Placing tail at it's correct position
        if(prev->next==NULL){
            tail=prev;
        }
    }
}
void print(Node *&head){
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main(){
    // Created a new node
    Node *node1=new Node(10);
    Node *head=node1;
    Node *tail=node1;
    insertAtHead(head,12);
    insertAtHead(head,15);
    print(head);
    // Position pointed to new node
    insertAtPos(tail,head,4,13);
    print(head);
    deleteNode(head,4);
    print(head);
    return 0;
}

B] Doubly Linked List

#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *prev;
    Node *next;
    Node(int data)
    {
        this->data = data;
        this->prev = NULL;
        this->next = NULL;
    }
    ~Node()
    {
        int value = this->data;
        if (next != NULL)
        {
            delete next;
            next = NULL;
        }
        cout << "Memory free " << value << endl;
    }
};
// Traversing a linked list
void print(Node *head)
{
    Node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
// Length of the linked list
int getLength(Node *head)
{
    int length = 0;
    Node *temp = head;
    while (temp != NULL)
    {
        length++;
        temp = temp->next;
    }
    return length;
}
// Inserting at head
void insertAtHead(Node *&tail, Node *&head, int d)
{
    // empty list
    if (head == NULL)
    {
        Node *temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else
    {
        Node *temp = new Node(d);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}
// Inserting at tail
void insertAtTail(Node *&tail, Node *&head, int d)
{
    // empty list
    if (tail == NULL)
    {
        Node *temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else
    {
        Node *temp = new Node(d);
        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    }
}
// Inserting at some random position
void insertAtPosition(Node *&tail, Node *&head, int position, int d)
{
    // innserting at start
    if (position == 1)
    {
        insertAtHead(tail, head, d);
        return;
    }
    Node *temp = head;
    int count = 1;
    while (count < position - 1)
    {
        temp = temp->next;
        count++;
    }
    // inserting at last position
    if (temp->next == NULL)
    {
        insertAtTail(tail, head, d);
        return;
    }
    // creating node for d
    Node *nodeToInsert = new Node(d);
    nodeToInsert->next = temp->next;
    temp->next->prev = nodeToInsert;
    temp->next = nodeToInsert;
    nodeToInsert->prev = temp;
}
void deleteNode(int position, Node *&head, Node *&tail)
{
    // deleting first node
    if (position == 1)
    {
        Node *temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    // deleting any random position node or last node
    else
    {
        Node *curr = head;
        Node *prev = NULL;
        int count = 1;
        while (count < position)
        {
            prev = curr;
            curr = curr->next;
            count++;
        }
        curr->prev = NULL;
        prev->next = curr->next;
        curr->next = NULL;
        delete curr;
        // Placing tail at it's correct position
        if(prev->next==NULL){
            tail=prev;
        }
    }
}
int main()
{
    Node *node1 = new Node(10);
    Node *head = node1;
    Node *tail = node1;
    // Node *head=NULL;
    // Node *tail=NULL;
    print(head);
    cout << getLength(head) << endl;
    insertAtHead(tail, head, 11);
    print(head);
    insertAtHead(tail, head, 12);
    print(head);
    insertAtHead(tail, head, 13);
    print(head);
    insertAtTail(tail, head, 15);
    print(head);
    insertAtPosition(tail, head, 2, 7);
    print(head);
    insertAtPosition(tail, head, 1, 10);
    print(head);
    insertAtPosition(tail, head, 8, 3);
    print(head);
    deleteNode(1, head, tail);
    print(head);
    deleteNode(3, head, tail);
    print(head);
    deleteNode(6, head, tail);
    print(head);
    cout<<head->data<<" "<<tail->data;
    return 0;
}

C] Circular Linked List

#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next = NULL;

    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
    ~Node()
    {
        int value = this->data;
        if (this->next != NULL)
        {
            delete next;
            next = NULL;
        }
        cout << "Memory free " << value << endl;
    }
};
void insertNode(Node *&tail, int element, int d)
{

    // empty list
    if (tail == NULL)
    {
        Node *newNode = new Node(d);
        tail = newNode;
        newNode->next = newNode;
    }
    // non-empty list assuming that the element is present in the list
    else
    {
        Node *curr = tail;
        while (curr->data != element)
        {
            curr = curr->next;
        }
        // element found -> curr is representing element wala node
        Node *temp = new Node(d);
        temp->next = curr->next;
        curr->next = temp;
    }
}
// Deletion
void deleteNode(Node *&tail,int value){
    // empty list
    if(tail==NULL){
        cout<<"List is empty "<<endl;
    }
    // non-empty list assuming that the element is present in the list
    else{
        Node *prev=tail;
        Node *curr=prev->next;
        while((curr->data)!= value){
            prev=curr;
            curr=curr->next;
        }
        prev->next=curr->next;
        // Only 1 node in the linked list
        if(curr==prev){
            tail=NULL;
        }
        // Greater than or equal to 2 node in the linked list
        if(tail==curr){
            tail=prev;
        }
        curr->next=NULL;
        delete curr;
    }
}
// Traversing 
void print(Node *&tail){
    if(tail==NULL){
        cout<<"List is empty "<<endl;
        return;
    }
    Node *temp=tail;
    do{
        cout<< tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;
}
int main()
{
    Node *tail = NULL;
    // insertion in empty list
    insertNode(tail,5,3);
    print(tail);
    insertNode(tail,3,5);
    print(tail);
    insertNode(tail,5,7);
    print(tail);
    insertNode(tail,7,9);
    print(tail);
    insertNode(tail,5,6);
    print(tail);
    insertNode(tail,9,10);
    print(tail);
    insertNode(tail,3,4);
    print(tail);
    deleteNode(tail,3);
    print(tail);
    deleteNode(tail,7);
    print(tail);
    deleteNode(tail,10);
    print(tail);
    return 0;
}

// Reverse a Linked List(Iterative)

class Solution
{
    public:
    //Function to reverse a linked list.
    struct Node* reverseList(struct Node *head)
    {
        Node *curr=head;
        Node *prev=NULL;
        Node *forward=NULL;
        if(head==null || head->next==null){
            return head;
        }
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
};

// Reverse a Linked List(Recursion)

class Solution
{
    public:
    struct Node* reverseList(struct Node *head)
    {
        if(head==NULL || head->next==NULL){
            return head;
        }
        Node *rev=reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return rev;
    }
};

// Reverse a Linked List in groups of given size

class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        if(head==NULL){
            return NULL;
        }
        //step1-we check that if k group is avaliable or not to reverse
        int avaliable= k, cnt = 0;
        node* temp = head;
        while(avaliable > 0 && temp != NULL){
            temp = temp -> next;
            avaliable--;
        }
        if(avaliable==0){
        //step2- we reverse for first k group
        node* next=NULL;
        node* curr=head;
        node* prev=NULL;
        while(curr!=NULL && cnt<k){
            next=curr->next;
            curr->next=prev;
            prev =curr;
            curr=next;
            cnt++;
        }
        //step3-we recursively take care of the remaining cases that are left out
        if(next!=NULL){
            head->next=reverse(next,k);
        }
        //step4 return prev as at last it will be the new head
        return prev;
        }
        //return head as the k group is not present to reverse
        return head;
    }
};

// Detect Loop in a linked list

class Solution
{
    public:
    bool detectLoop(Node* head)
    {
        if(head==NULL && head->next==NULL) return false;
        Node *slow=head;
        Node *fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
};

// Delete loop in a linked list

class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // code here
        Node*slow=head;
        Node*fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            
            if(slow==fast){
                break;
            }
            if(slow->next==head){
                slow->next=NULL;
                return ;
            }
        }
        if(fast==NULL || fast->next==NULL){
            return;
        }
        slow=head;
        while(slow->next!=fast->next){
            slow=slow->next;
            fast=fast->next;
        }
        fast->next=NULL;
    }
};

// Find the starting point of the loop in a linked list

class Solution
{
    public:
     //Function to find first node if the linked list has a loop.
    Node* floydCycle(Node* head)
    {
        if(head == NULL){
            return NULL;
        }
        Node* slow = head;
        Node* fast = head;
        while(slow!=NULL && fast!=NULL){
            fast = fast->next;
            if(fast!=NULL){
                fast = fast->next;
            }
            slow = slow->next;
            if(slow == fast){
                return slow;
            }
        }
        return NULL;
    }
    int findFirstNode(Node* head)
    {
        if(head == NULL){
            return -1;
        }
        Node* meet = floydCycle(head);
        if(meet == NULL){
            return -1;
        }
        Node* slow = head;
        while(slow!= meet){
            slow = slow->next;
            meet = meet->next;
        }
        return slow->data;
    }
};

// Remove duplicates in a sorted Linked list

Node * uniqueSortedList(Node * head) {
    if(head==NULL) return NULL;
    Node* curr=head;
    while(curr!=NULL){
        if(curr->next!=NULL && curr->data==curr->next->data){
            Node* next_next=curr->next->next;
            Node* nodeToDelete=curr->next;
            delete(nodeToDelete);
            curr->next= next_next;
        }
        else{
            curr=curr->next; 
        }
    }
    return head;
}

// Remove duplicates in an unsorted Linked List

// Method-1[Brute Force(T.C --> O(n^2),S.C --> O(1))]
Node *removeDuplicates(Node *head)
{
    if(head == NULL) return NULL;
    Node* curr = head;
    while(curr != NULL) {
        Node* temp = curr;
        while(temp -> next != NULL) {
            if(curr -> data == temp -> next -> data){
                Node* next_next = temp -> next -> next;
                Node* nodeToDelete = temp -> next;
                nodeToDelete -> next = NULL;
                delete nodeToDelete;
                temp -> next = next_next;
            }
            else
                temp = temp -> next;
        }
        curr = curr -> next;
    }
    return head;
}

// Method-2
Node *removeDuplicates(Node *head)
{
    if( head == NULL){
        return NULL;
    }
    unordered_map< int, bool> visited;
    Node *curr = head;
    while( curr -> next != NULL){
        visited[curr -> data ] = true;
        if( visited[curr -> next -> data] == true){
            curr -> next = curr -> next -> next;
        }
        else{
            curr = curr -> next;
        }
    }
    return head;
}

// Method-3(sort then use above question approach)

// Move last element to front of a given Linked List

#include <bits/stdc++.h>
using namespace std;
class Node {
public:
	int data;
	Node* next;
};
/* We are using a double pointer head_ref here because we change head of the linked list inside this function.*/
void moveToFront(Node** head_ref)
{
	/* If linked list is empty, or it contains only one node, then nothing needs to be done,simply return */
	if (*head_ref == NULL || (*head_ref)->next == NULL)
		return;
	/* Initialize second last and last pointers */
	Node* secLast = NULL;
	Node* last = *head_ref;
	/*After this loop secLast contains address of second last node and last contains address of last node in Linked List */
	while (last->next != NULL) {
		secLast = last;
		last = last->next;
	}
	/* Set the next of second last as NULL */
	secLast->next = NULL;
	/* Set next of last as head node */
	last->next = *head_ref;
	/* Change the head pointer to point to last node now */
	*head_ref = last;
}
/* Function to add a node at the beginning of Linked List */
void push(Node** head_ref, int new_data)
{
	/* allocate node */
	Node* new_node = new Node();
	/* put in the data */
	new_node->data = new_data;
	/* link the old list of the new node */
	new_node->next = (*head_ref);
	/* move the head to point to the new node */
	(*head_ref) = new_node;
}
/* Function to print nodes in a given linked list */
void printList(Node* node)
{
	while (node != NULL) {
		cout << node->data << " ";
		node = node->next;
	}
}
int main()
{
	Node* start = NULL;
	/* The constructed linked list is: 1->2->3->4->5 */
	push(&start, 5);
	push(&start, 4);
	push(&start, 3);
	push(&start, 2);
	push(&start, 1);
	cout << "Linked list before moving last to front\n";
	printList(start);
	// Function call
	moveToFront(&start);
	cout << "\nLinked list after removing last to front\n";
	printList(start);
	return 0;
}

// Add 1 to a number represented as linked list

class Solution
{
    public:
    Node* reverse(Node* head)
    {
        if(!head || !head->next)
            return head;
        Node* curr = head;
        Node* prev = NULL;
        Node* Next = head->next;
        while(curr->next!=NULL)
        {
            curr->next = prev;
            prev = curr;
            curr = Next;
            Next = Next->next;
        }
        curr->next = prev;
        return curr;
    }
    Node* addOne(Node *head) 
    {
        Node* newHead = reverse(head);
        Node* temp = newHead;
        while(temp->next != NULL && temp->data == 9)
        {
            temp->data = 0;
            temp = temp->next;
        }
        if(temp->data != 9)
            temp->data += 1;
        else if(temp->next == NULL && temp->data == 9)
        {
            temp->data = 0;
            temp->next = new Node(1);
        }
        return reverse(newHead);
    }
};

// Add two numbers represented by Linked List

class Solution
{
    public:
    struct Node *reverse(Node *head){
        Node *curr=head;
        Node *prev=NULL;
        Node *forward=NULL;
        while(curr!=NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;
    }
    void insertAtTail(struct Node* &head, struct Node* &tail,int val){
        Node *temp=new Node(val);
        // empty list
        if(head==NULL){
            head=temp;
            tail=temp;
            return;
        }
        // non-empty list
        else{
            tail->next=temp;
            tail=temp;
        }
    }
    struct Node *add(struct Node* first, struct Node* second){
        Node *ansHead=NULL;
        Node *ansTail=NULL;
        int carry=0;
        while(first!=NULL || second!=NULL || carry!=0){
            int val1=0;
            if(first!=NULL){
                val1=first->data;
            }
            int val2=0;
            if(second!=NULL){
                val2=second->data;
            }
            int sum=carry+val1+val2;
            int digit=sum%10;
            // create node and add in answer linked list
            insertAtTail(ansHead,ansTail,digit);
            carry=sum/10;
            if(first!=NULL){
                first=first->next;
            }
            if(second!=NULL){
                second=second->next;
            }
        }
        return ansHead;
    }
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        // reverse the linked lists which are to be added
        first=reverse(first);
        second=reverse(second);
        // perform addition
        Node *ans=add(first,second);
        // reverse the answer linked list
        ans=reverse(ans);
        return ans;
    }
};

// 
