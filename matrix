// Spiral travesrsing a matrix

class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        vector<int> ans;
        int row=matrix.size();
        int col=matrix[0].size();
        int total=row*col;
        int sr=0,er=row-1,sc=0,ec=col-1;
        int count=0;
        while(count<total){
            for(int i=sc;count<total && i<=ec;i++){
                ans.push_back(matrix[sr][i]);
                count++;
            }
            sr++;
            for(int i=sr;count<total && i<=er;i++){
                ans.push_back(matrix[i][ec]);
                count++;
            }
            ec--;
            for(int i=ec;count<total && i>=sc;i--){
                ans.push_back(matrix[er][i]);
                count++;
            }
            er--;
            for(int i=er;count<total && i>=sr;i--){
                ans.push_back(matrix[i][sc]);
                count++;
            }
            sc++;
        }
        return ans;
    }
};

// Search in a 2D matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int start=0,end=(row*col)-1,mid=start+(end-start)/2;
        while(start<=end){
            int element=matrix[mid/col][mid%col];
            if(element<target){
                start=mid+1;
            }
            else if(element==target){
                return 1;
            }
            else{
                end=mid-1;
            }
            mid=start+(end-start)/2;
        }
        return 0;
    }
};

// Median in a row-wise sorted matrix

class Solution{   
public:
    int median(vector<vector<int>> &matrix, int R, int C){
        vector<int> ans;
        for(int i=0; i<R; i++){
            for(int j=0; j<C; j++){
                ans.push_back(matrix[i][j]);
            }
        }
        sort(ans.begin(),ans.end());
        int n = ans.size();
        if(n%2 != 0)
        {
            return ans[n/2];
        }
        else
        {
            return (ans[n/2] + ans[(n/2)-1])/2;
        }
    }
};

// Row with max 1s

class Solution{
public:
    int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
    	int ans = -1;
        // In Case row has any 1 then if we return 0 it will be wrong so we are taking ans= -1
        int max = 0;
        for (int i = 0; i < n; i++)
        {
            int count = 0;
            for (int j = 0; j < m; j++)
            {
                if (arr[i][j] == 1)
                    count++;
            }
            if (count > max)
            {
                max = count;
                ans = i;
            }
        }
        return ans;
	}
};

// Sorted matrix

class Solution {
  public:
    vector<vector<int>> sortedMatrix(int n, vector<vector<int>> m) {
        vector<int> v;
        for(int i=0;i<n;i++)
        {
           for(int j=0;j<n;j++)
           {
               v.push_back(m[i][j]);
           }
        }
        sort(v.begin(),v.end());
        int k=0;
        for(int i=0;i<n;i++)
        {
           for(int j=0;j<n;j++)
           {
              m[i][j]=v[k];
             k++;
           }
        }
        return m;
    }
};

// Maximum size rectangle

class Solution{
  public:
    int largestArea(vector<int>& arr)
    {
        int n = arr.size();
        stack<int> stk;
        stk.push(-1);
        int max_area=0;
        for(int i=0;i<n;i++)
        {
            while(stk.top()!=-1 && arr[stk.top()]>=arr[i])
            {
                int height = arr[stk.top()];
                stk.pop();
                int ls = stk.top();
                int rs = i;
                int width = rs-ls-1;
                max_area = max(max_area,width*height);
            }
            stk.push(i);
        }
        while(stk.top()!=-1)
        {
            int height = arr[stk.top()];
            stk.pop();
            int ls = stk.top();
            int rs = n;
            int width = rs-ls-1;
            max_area = max(max_area,width*height);
        }
        
        return max_area;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        vector<int> arr(m,0);
        int ans=largestArea(arr);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(M[i][j]==1) arr[j]++;
                else arr[j]=0;
            }
            ans = max(ans,largestArea(arr));
        }
        return ans;
    }
};

// Find a specific pair in a matrix



// Rotate a matrix by 90 degree in clockwise direction without using any extra space

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        for(int k=0;k<n;k++){
            reverse(matrix[k].begin(), matrix[k].end());
        }
    }
};

// kth element in Matrix

int kthSmallest(int mat[MAX][MAX], int n, int k)
{
    vector<int>ans;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            ans.push_back(mat[i][j]);
        }
    }
    sort(ans.begin(),ans.end());
    return ans[k-1];
}

// Common elements in all rows of a given matrix

// A Program to prints common element in all
// rows of matrix
#include <bits/stdc++.h>
using namespace std;
// Specify number of rows and columns
#define M 4
#define N 5
// prints common element in all rows of matrix
void printCommonElements(int mat[M][N])
{
	unordered_map<int, int> mp;
	// initialize 1st row elements with value 1
	for (int j = 0; j < N; j++)
		mp[mat[0][j]] = 1;
	// traverse the matrix
	for (int i = 1; i < M; i++)
	{
		for (int j = 0; j < N; j++)
		{
			// If element is present in the map and
			// is not duplicated in current row.
			if (mp[mat[i][j]] == i)
			{
			// we increment count of the element
			// in map by 1
				mp[mat[i][j]] = i + 1;
				// If this is last row
				if (i==M-1 && mp[mat[i][j]]==M)
				cout << mat[i][j] << " ";
			}
		}
	}
}
// driver program to test above function
int main()
{
	int mat[M][N] =
	{
		{1, 2, 1, 4, 8},
		{3, 7, 8, 5, 1},
		{8, 7, 7, 3, 1},
		{8, 1, 2, 7, 9},
	};
	printCommonElements(mat);
	return 0;
}
