// Insertion , Searching and removal in Tries

#include<iostream>
using namespace std;
class TrieNode{
    public:
        char data;
        TrieNode* children[26];
        bool isTerminal;

        TrieNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            isTerminal=false;
        }
};
class Trie{
    public: 
    TrieNode* root;
    Trie(){
        root=new TrieNode('\0');
    }
    void insertUtil(TrieNode* root,string word){
        // base case
        if(word.length()==0){
            root->isTerminal=true;
            return;
        }
        // assumption, word wil be in CAPS
        int index=word[0]-'A';
        TrieNode* child=new TrieNode('\0');
        // present
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        // absent
        else{
            child = new TrieNode(word[0]);
            root->children[index]=child;
        }   
        // Recursion
        insertUtil(child,word.substr(1));
    }
    void insertWord(string word){
        insertUtil(root,word);
    }
    bool searchUtil(TrieNode* root,string word){
        // base case
        if(word.length()==0){
            return root->isTerminal;
        }
        int index=word[0]-'A';
        TrieNode* child;
        // present
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        // absent
        else{
            return false;
        }
        // recursion
        return searchUtil(child,word.substr(1));
    }
    bool searchWord(string word){
        return searchUtil(root,word);
    }
    void removeUtil(TrieNode* root,string word){
        // base case
        if(word.length()==0){
            root->isTerminal=false;
            return;
        }
        // assumption, word wil be in CAPS
        int index=word[0]-'A';
        TrieNode* child;
        // present
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        // absent
        else{
            child = new TrieNode(word[0]);
            root->children[index]=child;
        }   
        // Recursion
        return removeUtil(child,word.substr(1));
    }
    void removeWord(string word){
        removeUtil(root,word);
        return;
    }
};
int main(){
    Trie *t=new Trie();
    t->insertWord("ARM");
    t->insertWord("DO");
    t->insertWord("TIME");
    cout<<"Present or not "<<t->searchWord("TIME")<<endl;
    cout<<"Present or not "<<t->searchWord("TIM")<<endl;
    t->removeWord("TIME");
    t->removeWord("DO");
    cout<<"Present or not "<<t->searchWord("TIME")<<endl;
    cout<<"Present or not "<<t->searchWord("TIM")<<endl;
    return 0;
}

// Shortest Unique prefix for every word

class TrieNode{
    public:
    TrieNode*children[26];
    bool isEnd;
    int count;

    TrieNode(){
        for(int i=0;i<26;i++){
            children[i]=nullptr;
        }
        isEnd=false;
        count=0;
    }
};
class Solution
{
    public:
        void insert(TrieNode *root, string word){
            if (word.length() == 0) {
                root->isEnd = true;
                return;
            }
            
            int index=word[0]-'a';
            TrieNode*child;

            //present
            if(root->children[index]!=nullptr){
                child=root->children[index];
            }
            //absent
            else{
                child=new TrieNode();
                root->children[index]=child;
            }
            root->count++;
            root->isEnd=true;
            insert(child,word.substr(1));
        }
    string search(TrieNode *root, string &word){
        string res = "";
        
        for(int i=0; i<word.size(); i++){
            int idx = word[i] - 'a';
            if(root->children[idx]->count == 1)
            {
                res += word[i];
                break;
            }
            res += word[i];
            root = root->children[idx];
        }
        return res;
    }  
    vector<string> findPrefixes(string arr[], int n)
    {
        TrieNode *root = new TrieNode();

        vector<string> ans;

        for(int i=0; i<n; i++){
           insert(root,arr[i]);
        }
        
        for(int i=0; i<n; i++){
            ans.push_back(search(root,arr[i]));
        }
        
        return ans;
    } 
};

// Word Break Problem

class TrieNode {
public:
    bool isLeaf;
    TrieNode *children[26];

    TrieNode() {
        isLeaf = false;

        for(int i=0;i<26;i++) {
            children[i] = NULL;
        }
    }
};

class Trie {
private:
    TrieNode *root;
public:
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        int len = word.length();
        TrieNode* cur = root;
        int index = 0;

        for(int i=0;i<len;i++) {
            index = word[i]-'a';

            if(cur->children[index]==NULL) {
                cur->children[index] = new TrieNode();
            }
            cur = cur->children[index];
        }
        cur->isLeaf = true;
    }
    
    bool search(string s) {
        int len = s.size();
        TrieNode* cur = root;
        int index = 0;
        
        for(int i=0;i<len;i++) {
            index = s[i]-'a';
            
            if(cur->children[index]==NULL) return 0;
            cur = cur->children[index];
        }
        return (cur && cur->isLeaf);
    }
};

class Solution{
    private:
    
    bool solve(string a) {
        int n = a.length();
        if(n==0) return true; ////////IMP
        
        for(int i=1;i<=n;i++) {
            if(obj->search(a.substr(0, i))  &&  solve(a.substr(i))) 
                return true;
        }
        return false;
    }
    
    public:
    // A : given string to search
    // B : vector of available strings
    
    Trie* obj = new Trie();
    
    int wordBreak(string a, vector<string> &b) {
        //code here
        
        for(auto it : b) obj->insert(it);
        
        return solve(a);
    }
};

// Print Anagrams Together

// Method-1
class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& strs) {
        vector<vector<string>>v;
        unordered_map<string,vector<string>>m;
        for(auto x:strs){
            string temp=x;
            sort(x.begin(),x.end());
            m[x].push_back(temp);
        }
        for(auto x:m){
            v.push_back(x.second);
        }
        return v;
    }
};

// Method-2
class Trie
{
    struct Node
    {
        Node* children[26] = {NULL};
        int isLeaf = -1;
    };
    Node* head;
    
    public:
    
    Trie()
    {
        head = new Node();
    }
    
    int getStringIndex(string& str, int& anagramIndex)
    {
        Node* temp = head;
        for(char& ch : str)
        {
            if(temp->children[ch-'a'] == NULL)
               temp->children[ch-'a'] = new Node();
            
            temp = temp->children[ch-'a'];
        }
        
        //As this lexical form of str is appearing for first time 
        //so in ans we need to print this str at new row
        if(temp->isLeaf == -1)
            temp->isLeaf = ++anagramIndex;
        
        
        //As this lexical form of str has appeared prev
        //so we need to append this str in the same row 
        //that of its anagram. That row no. will be stored in isLeaf
        return temp->isLeaf;
    }
    
};

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
        
        Trie t;
        int n = string_list.size();
        vector<vector<string> > ans;
        //This will be used to store different group of anagrams
        //at different rows.
        int anagramIndex = -1;
        
        for(int i=0; i<n; i++)
        {
            string temp = string_list[i];
            sort(temp.begin(), temp.end());
            
            int index = t.getStringIndex(temp, anagramIndex);
            
            
            if(anagramIndex == ans.size()) 
            {
                //when str will form new group of anagram
                ans.push_back(vector<string>(1, string_list[i]));
            }
            else
            {
                //when str is from any of previously formed group of anagram 
                ans[index].push_back(string_list[i]);   
            }
        }
        
        return ans;
    }
};

// Phone Directory

class Solution{
    public:
    class Node{
        public:
            char data;
            Node* children[26];
            bool isTerminal;
            Node(char ch)
            {
                data = ch;
                for(int i = 0; i < 26; i++)
                    children[i] = NULL;
                isTerminal = false;
            }
    };
    class Trie{
        public:
        Node* root;
        Trie()
        {
            root = new Node('\0');
        }
        void insert(Node* root, string key)
        {
            if(key.length() == 0)
            {
                root -> isTerminal = true;
                return;
            }
            int index = key[0] - 'a';
            Node* child;
            //present
            if(root -> children[index] != NULL)
                child = root -> children[index];
            else
            {
                child = new Node(key[0]);
                root -> children[index] = child;
            }
            insert(child, key.substr(1));
        }
        void insertWord(string word)
        {
            insert(root, word);
        }
        void printSuggestions(Node* curr, vector<string> &temp, string prefix)
        {
            if(curr -> isTerminal)
                temp.push_back(prefix);
            for(char ch = 'a'; ch <= 'z'; ch++)
            {
                Node* next = curr -> children[ch-'a'];
                if(next != NULL)
                {
                    prefix.push_back(ch);
                    printSuggestions(next, temp, prefix);
                    prefix.pop_back();
                }
            }
        }
        vector<vector<string> > getSuggestions(string str)
        {
            Node* prev = root;
            vector<vector<string>> output;
            string prefix = "";
            int i = 0;
            for(int i = 0; i < str.length(); i++)
            {
                char lastch = str[i];
                prefix.push_back(lastch);
                // check for last character
                Node* curr = prev->children[lastch - 'a'];
                //if not found
                if(curr == NULL)
                    break;
                //if found
                vector<string> temp;
                printSuggestions(curr, temp, prefix);
                output.push_back(temp);
                temp.clear();
                prev = curr;
            }
            if( i < str.size()){
                while( i < str.size()){
                    output.push_back({"0"});
                    i++;
                }
            }
            return output;
        }
    };
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        Trie *t = new Trie();
        //insert all the contacts
        for(int i = 0; i < n; i++)
        {
            string str = contact[i];
            t->insertWord(str);
        }
        //return answer
        return t->getSuggestions(s);
    }
};

// Unique rows in boolean matrix

// Method-1
vector<vector<int>> uniqueRow(int M[MAX][MAX],int row,int col)
{
    vector<vector <int>> ans;
    map <vector<int>,int> mp;
    for(int i=0;i<row;i++){
        vector <int> temp;
        for(int j=0;j<col;j++){
            temp.push_back(M[i][j]);
        }
        if(mp.find(temp)==mp.end()){
            mp[temp]=1;
            ans.push_back(temp);
        }
    }
    return ans;
}

// Method-2
class Node{
    public:
        int end =0;
        Node* l;
        Node* r;
    };
    void insert(Node* root,int val[],int col,vector<vector<int>> &ans,vector<int> r){
        
        for(int i=0; i<col;i++){
            if(val[i]==1){
                if(root->r==NULL){
                    root->r = new Node();
                }
                root = root->r;
                r.push_back(1);
            }else{
                if(root->l==NULL){
                    root->l = new Node();
                }
                root = root->l;
                r.push_back(0);
            }
        }
        if(root->end == 0){
            ans.push_back(r);
            root->end = 1;
        }
    }
/*You are required to complete this function*/
vector<vector<int>> uniqueRow(int M[MAX][MAX],int row,int col)
{
//Your code here
    Node* root = new Node();
    vector<vector<int>> ans;
    vector<int> r;
    for(int i=0 ;i<row;i++){
        insert(root,M[i],col,ans,r);
    }
    return ans;
}

// Group Anagrams Together

// Method-1
#include <bits/stdc++.h> 
vector<vector<string> > groupAnagramsTogether(vector<string> &strList)
{
    unordered_map<string,vector<string>> mp;
    for(int i=0;i<strList.size();i++){
        string curr=strList[i];
        string temp=curr;
        sort(curr.begin(),curr.end());

        mp[curr].push_back(temp);
    }
    vector<vector<string>> ans; 
    for(auto curr:mp){
        ans.push_back(curr.second);
    }
    return ans;
}

// Method-2
#include <algorithm>
class TrieNode
{
public:
    TrieNode *children[26];
    vector<int> index;
    TrieNode()
    {
        for (int i = 0; i < 26; i++)
        {
            children[i] = NULL;
        }
    }
    ~TrieNode()
    {
        for (int i = 0; i < 26; i++)
        {
            if (children[i] != NULL)
            {
                delete children[i];
            }
        }
        index.clear();
        index.resize(0);
    }
};
void insert(string s, TrieNode *head, int ind)
{
    TrieNode *temp = head;
    // Sort the string.
    sort(s.begin(), s.end());
    // Iterate through the given string
    for (char i : s)
    {
        // If child node is not present.
        if (temp->children[i - 'a'] == NULL)
        {
            // Create new child node.
            temp->children[i - 'a'] = new TrieNode();
        }
        // Move to the child node.
        temp = temp->children[i - 'a'];
    }
    temp->index.push_back(ind);
}
// Function to group all anagrams together.
void groupStrings(TrieNode *head, vector<vector<string>> &groups, vector<string> &strList)
{
    if (head == NULL)
    {
        return;
    }
    vector<string> currGroup;
    // Traverse all strings ending at the current node.
    for (int i : head->index)
    {
        // Group all strings ending at the current node.
        currGroup.push_back(strList[i]);
    }
    if (currGroup.size() > 0)
    {
        groups.push_back(currGroup);
    }
    // Iterate thorugh the children.
    for (int i = 0; i < 26; i++)
    {
        groupStrings(head->children[i], groups, strList);
    }
}
vector<vector<string>> groupAnagramsTogether(vector<string> &strList)
{
    TrieNode *head = new TrieNode();
    int n = strList.size();
    for (int i = 0; i < n; i++)
    {
        insert(strList[i], head, i);
    }
    // For storing groups of anagrams.
    vector<vector<string>> groups;
    groupStrings(head, groups, strList);
    // Free the memory.
    delete head;
    return groups;
}

// Word Ladder

// Method-1
#include<bits/stdc++.h>
using namespace std;

long long helper(string &curr, string &end, unordered_set<string> &dict) {
	if(curr==end) {
		return 1;
	}
	long long ans=INT_MAX;
	for(int i=0;i<curr.length();i++) {
		for(char c='a';c<='z';c++) {
			char tmp=curr[i];
			if(tmp!=c) {
				curr[i]=c;
				if(dict.find(curr)!=dict.end()) {
					dict.erase(curr);
					ans=min(ans,1+helper(curr,end,dict));
					dict.insert(curr);
				}
				curr[i]=tmp;
			}
		}
	}
	return ans;
}
int wordLadder(string begin, string end, vector<string> &dict) {
	unordered_set<string>stock(dict.begin(),dict.end());
	int ans=helper(begin,end,stock);
	return ans>=INT_MAX?-1:ans;
}

// Method-2
#include<queue>
#include<set>
#include <algorithm>

int wordLadder(string begin, string end, vector < string > & dict) {
    // If the end word is not present in dict then just return -1.
    if (std::find(dict.begin(), dict.end(), end) == dict.end()) {
        return -1;
    }

    queue < string > queue;
    int count = 1;

    // Add the begin word.
    queue.push(begin);
    set < string > set;

    set.insert(begin);

    while (queue.size() > 0) {
        count++;
        // Iterate through the queue.
        for (int i = 0; i < queue.size(); i++) {
            string currentWord = queue.front();
            queue.pop();

            if (currentWord == end) {
                return count;
            }
            int check = 0;

            for (int z = 0; z < currentWord.size(); z++) {
                if (currentWord[z] != end[z]) {
                    check++;
                }
            }
            if (check == 1) {
                return count;
            }

            // Check for the adjacent word.
            for (int j = 0; j < dict.size(); j++) {
                int diff = 0;

                for (int k = 0; k < currentWord.size(); k++) {
                    if (currentWord[k] != dict[j][k]) {
                        diff++;
                    }
                }
                if (diff == 1) {
                    if (set.find(dict[j]) == set.end()) {
                        queue.push(dict[j]);
                        set.insert(dict[j]);
                    }
                }
            }
        }
    }
    // If it's not possible to form the word.
    return -1;
}

// Method-3
#include <queue>

#include <unordered_map>

class TrieNode {
    public:
        unordered_map < char, TrieNode * > children;

    // For getting end of word.
    bool endOfWord;
    char ch;

    TrieNode(char ch) {
        this -> ch = ch;
        endOfWord = false;
        children[ch] = NULL;
    }
};

// Function to insert words of dict.
void insertWord(TrieNode * root, string & word, int i = 0) {
    if (i == word.size()) {
        root -> endOfWord = true;
        return;
    }

    if (root -> children[word[i]] == NULL) {
        root -> children[word[i]] = new TrieNode(word[i]);
    }

    insertWord(root -> children[word[i]], word, i + 1);
}

void allPermutations(TrieNode * root, string & str, vector < string > & all, string curr = "", bool changed = false, unsigned int i = 0) {
    // We can not get any string.
    if (root == NULL) {
        return;
    }

    // Finaly we got a string but will store only when it is a valid word from dictionary.
    if (curr.size() == str.size()) {
        if (root -> endOfWord) {
            all.push_back(curr);
        }
        return;
    }

    // Check further in trie.
    for (auto x: root -> children) {
        curr.push_back(x.first);

        if (x.first == str[i]) {
            allPermutations(x.second, str, all, curr, changed, i + 1);
        } else if (!changed) {
            allPermutations(x.second, str, all, curr, !changed, i + 1);
        }

        // BackTrack.
        curr.pop_back();
    }
}

int wordLadder(string & begin, string & end, vector < string > & dict) {
    // Make a Trie.
    TrieNode * root = new TrieNode('\0');

    // Insert all word from dictionary into trie.
    for (string x: dict) {
        insertWord(root, x);
    }

    // Queue for BFS.
    queue < string > q;
    q.push(begin);

    // Check for visited words.
    unordered_map < string, int > visited;
    visited[begin] = 1;

    // Start BFS.
    while (q.size() > 0) {
        string str = q.front();
        q.pop();

        // If str is the target then return it.
        if (str == end) {
            return visited[str];
        }

        // Store all the permutations.
        vector < string > allPossible;
        allPermutations(root, str, allPossible);

        // Push into queue if they are not visited yet.
        for (string x: allPossible) {
            if (visited.count(x) == 0) {
                q.push(x);
                visited[x] = visited[str] + 1;
            }
        }
    }
    return -1;
}
